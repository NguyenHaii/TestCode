
CREATE DATABASE StudentManagement;
GO

USE StudentManagement;
GO

CREATE TABLE Class (
    ClassId INT NOT NULL PRIMARY KEY,
    ClassName NVARCHAR(30)
);

CREATE TABLE Student (
    StudentId INT NOT NULL PRIMARY KEY,
    StudentName NVARCHAR(50),
    BirthDate DATETIME,
    ClassId INT,
    CONSTRAINT FK_Student_Class FOREIGN KEY (ClassId) REFERENCES Class(ClassId)
);

CREATE TABLE Subject (
    SubjectId INT NOT NULL PRIMARY KEY,
    SubjectName NVARCHAR(100),
    SessionCount INT CHECK (SessionCount > 0)
);

CREATE TABLE Result (
    StudentId INT NOT NULL,
    SubjectId INT NOT NULL,
    Mark INT,
    PRIMARY KEY (StudentId, SubjectId),
    CONSTRAINT FK_Result_Student FOREIGN KEY (StudentId) REFERENCES Student(StudentId),
    CONSTRAINT FK_Result_Subject FOREIGN KEY (SubjectId) REFERENCES Subject(SubjectId)
);
GO

SET DATEFORMAT DMY;

INSERT INTO Class (ClassId, ClassName)
VALUES (1, N'A1'), (2, N'A2'), (3, N'A3'), (4, N'A4'), (5, N'A5');

INSERT INTO Student (StudentId, StudentName, BirthDate, ClassId)
VALUES 
(1, N'Toàn Ngô Vĩnh', '01/01/1992', 1),
(2, N'Nguyễn Văn Test', '08/06/1993', 3),
(3, N'Nguyễn Văn B', '10/02/2001', 4),
(4, N'Nguyễn Văn C', '30/06/1998', 1),
(5, N'Nguyễn Văn D', '24/08/1995', 2);

INSERT INTO Subject (SubjectId, SubjectName, SessionCount)
VALUES 
(1, N'C Programming', 20),
(2, N'HTML/CSS', 15),
(3, N'Database Management', 30);

INSERT INTO Result (StudentId, SubjectId, Mark)
VALUES 
(1, 1, 8), (1, 2, 7),
(2, 3, 5),
(3, 2, 7),
(4, 3, 8),
(5, 2, 4);
GO

CREATE VIEW vwStudentSubjectMark AS
SELECT 
    s.StudentId,
    s.StudentName,
    sb.SubjectName,
    r.Mark
FROM Result r
JOIN Student s ON r.StudentId = s.StudentId
JOIN Subject sb ON r.SubjectId = sb.SubjectId;
GO

CREATE PROC sp_IncreaseMark @SubjectId INT
AS
BEGIN
    UPDATE Result
    SET Mark = Mark + 1
    WHERE SubjectId = @SubjectId;
END
GO

CREATE NONCLUSTERED INDEX IX_Student_StudentName ON Student(StudentName);
GO

CREATE TRIGGER TG_Result_Insert ON Result
FOR INSERT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM inserted WHERE Mark < 0)
    BEGIN
        RAISERROR('Không được chèn điểm < 0', 16, 1);
        ROLLBACK;
    END
END
GO

CREATE TRIGGER TG_Subject_Update ON Subject
FOR UPDATE
AS
BEGIN
    IF UPDATE(SubjectName)
    BEGIN
        RAISERROR('Không được sửa tên môn học!', 16, 1);
        ROLLBACK;
    END
END
GO


SELECT * FROM Class;

SELECT s.StudentId, s.StudentName, sb.SubjectName, r.Mark
FROM Result r
JOIN Student s ON r.StudentId = s.StudentId
JOIN Subject sb ON r.SubjectId = sb.SubjectId;

SELECT * FROM Student
WHERE BirthDate BETWEEN '1993-01-01' AND '1998-12-31';

SELECT 
    s.StudentId,
    s.StudentName,
    AVG(CAST(r.Mark AS FLOAT)) AS AvgMark
FROM Student s
JOIN Result r ON s.StudentId = r.StudentId
GROUP BY s.StudentId, s.StudentName;

SELECT 
    c.ClassId,
    c.ClassName,
    COUNT(s.StudentId) AS TotalStudents
FROM Class c
LEFT JOIN Student s ON s.ClassId = c.ClassId
GROUP BY c.ClassId, c.ClassName;

SELECT 
    s.StudentId,
    s.StudentName,
    SUM(r.Mark) AS TotalMark
FROM Student s
JOIN Result r ON s.StudentId = r.StudentId
GROUP BY s.StudentId, s.StudentName
HAVING SUM(r.Mark) > 10;



*Quản lý nhân khẩu
drop database if exists quanlynhankhau;
go
create database quanlynhankhau
go
use quanlynhankhau
go
create table QuanHuyen (
	MaQH int identity not null,
	TenQH nvarchar(100)
)
create table DuongPho (
	DuongID int not null,
	MaQH int not null,
	TenDuong nvarchar(max) not null,
	NgayDuyet datetime not null
)
create table NhaTrenPho(
	NhaID int not null,
	DuongID int not null,
	ChuHo nvarchar(50),
	Dientich money,
	sonhankhau int
)
go
alter table QuanHuyen add constraint PK_QuanHuyen
primary key (MaQH);
alter table DuongPho add constraint PK_DuongPho
primary key (DuongID);
alter table NhaTrenPho add constraint PK_NhaTrenPho
primary key (NhaID);
go
alter table NhaTrenPho add constraint FK_NhaTrenPho_DuongPho
foreign key (DuongID) references DuongPho(DuongID);
alter table DuongPho add constraint FK_DuongPho_QuanHuyen
foreign key (MaQH) references QuanHuyen(MaQH);
go
alter table DuongPho add constraint CK_DuongPho_NgayDuyenTen
check (NgayDuyet between '1945-09-02' and getdate());

go
insert into QuanHuyen (TenQH) values (N'Ba Đình'), (N'Hoàng mai');
insert into QuanHuyen (TenQH) values ('ố ớ ế ờ');

select * from QuanHuyen;
delete from QuanHuyen;

go
insert into DuongPho (DuongID,MaQH,TenDuong,NgayDuyet)
values (1,1,N'Trường Chinh','1946-10-19'),
(2,1,N'Tây Sơn','1998-12-30'),
(3,2,N'Chùa Bộc','1975-09-21');
go
insert into NhaTrenPho (NhaID,DuongID,ChuHo,Dientich,SoNhanKhau)
values (1,1,N'Toàn Ngô Vĩnh',100,4),
(2,1,N'Lê Văn A',20,12),
(3,2,N'Nguyễn Thị B',40,1)

select * from QuanHuyen;
select * from DuongPho;
select * from NhaTrenPho;

update DuongPho set [TenDuong] = N'Thái Hà'
where [TenDuong] = N'Chùa Bộc';
go
create view vw_All_NhaTrenPho as
select NhaTrenPho.*,DuongPho.TenDuong,QuanHuyen.TenQH from NhaTrenPho join 
DuongPho on NhaTrenPho.DuongID = DuongPho.DuongID
join QuanHuyen on QuanHuyen.MaQH = DuongPho.MaQH
go
create view view_AVG_NhaTrenPho as
select avg(NhaTrenPho.Dientich) as dientichtrungbinh,
avg(NhaTrenPho.sonhankhau) as Nhankhautrungbinh
,DuongPho.DuongID, DuongPho.TenDuong from NhaTrenPho join DuongPho
on NhaTrenPho.DuongID = DuongPho.DuongID
group by DuongPho.DuongID, DuongPho.TenDuong
go
select * from view_AVG_NhaTrenPho 
order by dientichtrungbinh asc, Nhankhautrungbinh asc;
go

select * from DuongPho;
go
create proc  sp_NgayDuyetTen_DuongPho @NgayDuyet datetime
as
begin
select DuongPho.*,QuanHuyen.TenQH as TenQH from DuongPho join  QuanHuyen
on DuongPho.MaQH = QuanHuyen.MaQH where NgayDuyet = @NgayDuyet
end

exec sp_NgayDuyetTen_DuongPho '1998-12-30' 

alter table NhaTrenPho drop constraint PK_NhaTrenPho;
go
create clustered index CI_NhaTrenPho_NhaID on NhaTrenPho(NhaID)
go
create unique nonclustered index UI_QuanHuyen_TenQH on QuanHuyen(TenQH);


go

create trigger TG_NhaTrenPho_Update on NhaTrenPho
for update as
begin
if exists(select * from inserted  where SoNhanKhau < 0)
	begin
		print 'SoNhanKhau phai lon hon 0';
		rollback transaction;
	end
end;
go
select * from NhaTrenPho;

update NhaTrenPho set sonhankhau = -1 where NhaID = 4
or NhaID = 3;

go
create trigger TG_DuongPho_Instead_Of_Delete on DuongPho
instead of delete as
begin
raiserror('Khong xoa duoc duong pho',16,1000);
end
go
select * from DuongPho
delete from DuongPho  where DuongID = 3;
go
