1. Bài quàn lý sinh viên (StudentManagement)
﻿﻿-- DROP DATABASE studentManagement

--  Tạo database
	CREATE DATABASE StudentManagement
GO
--  Tạo bảng
	USE StudentManagement
	--drop table Class;
	CREATE TABLE Class (
		ClassId int NOT NULL,
		ClassName nvarchar(30),
		--CONSTRAINT PK_Class PRIMARY KEY (ClassId)
	)

	CREATE TABLE Student (
		StudentId int NOT NULL,
		StudentName nvarchar(50),
		BirthDate datetime,
		ClassId int,
		--CONSTRAINT PK_Student PRIMARY KEY (StudentId),
		--CONSTRAINT FK_Student_Class FOREIGN KEY (ClassId) REFERENCES Class(ClassId)
	)

	CREATE TABLE Subject (
		SubjectId int NOT NULL,
		SubjectName nvarchar(100),
		SessionCount int,
		--CONSTRAINT PK_Subject PRIMARY KEY (SubjectId),
		--CONSTRAINT CK_Subject_Check_SessionCount CHECK (SessionCount>0)
	)

	CREATE TABLE Result (
		StudentId int NOT NULL,
		SubjectId int NOT NULL,
		Mark int,
		--CONSTRAINT PK_Result PRIMARY KEY (StudentId, SubjectId),
		--CONSTRAINT FK_Result_Student FOREIGN KEY (StudentId) REFERENCES Student(StudentId),
		--CONSTRAINT FK_Result_Subject FOREIGN KEY (SubjectId) REFERENCES Subject(SubjectId)
	)
GO
alter table Class add constraint Classs_ID primary key (ClassId);

alter table Student add constraint Students_PK primary key (StudentId);
alter table Student add constraint Students_ClassID_FK foreign key (ClassId) references Class(ClassId);
alter table [Subject] add constraint Subjects_PK primary key (SubjectId);
alter table [Subject] add constraint CK_Subject_Check_SessionCount check (SessionCount > 0)

alter table Result add constraint PK_Results primary key (StudentId, SubjectId);
alter table Result add constraint FK_Resulte_StudentID foreign key (StudentId) references
Student(StudentId);
alter table Result add constraint FK_Results_SubjectID foreign key (SubjectId) references
[Subject](SubjectId);

--  Chèn dữ liệu
	USE StudentManagement

	INSERT INTO Class 
				(ClassId, ClassName)
		VALUES	(1,       N'A1'    ),
				(2,       N'A2'    ),
				(3,       N'A3'    ),
				(4,       N'A4'    ),
				(5,       N'A5'    )

	SET DATEFORMAT dmy;
	INSERT INTO Student
				(StudentId, StudentName,        BirthDate,    ClassId)
		VALUES  (1,         N'Toàn Ngô Vĩnh',   '01/01/1992', 1      ),
				(2,         N'Nguyễn Văn Test', '08/06/1993', 3      ),
				(3,         N'Nguyễn Văn B',    '10/02/2001', 4      ),
				(4,         N'Nguyễn Văn C',    '30/06/1998', 1      ),
				(5,         N'Nguyễn Văn D',    '24/08/1995', 2      )

	INSERT INTO Subject
				(SubjectId, SubjectName,            SessionCount)
		VALUES  (1,         N'C Programming',       20          ),
				(2,         N'HTML/CSS',            15          ),
				(3,         N'Database Management', 30          )

	INSERT INTO Result
				(StudentId, SubjectId, Mark)
		VALUES  (1,         1,         8   ),
                (1,         2,         7   ),
                (2,         3,         5   ),
                (3,         2,         7   ),
                (4,         3,         8   ),
                (5,         2,         4   )

SELECT * from Class;
select * from Result;
select * from Student;
select * from Subject;

select top 3 * from Student;
select top 3 * from Student,Result 
where Student.StudentId = Result.StudentId
order by Result.Mark desc;
select * from Student
where BirthDate between '1993/01/01' and '1998/12/31';
select * from Student

select Student.StudentId,Student.StudentName, AVG(CAST(Result.Mark as Float)) avgMark
from student,Class,Result
where student.StudentId = Result.StudentId
and Student.ClassId = Class.ClassId
group by Student.StudentId,Student.StudentName;
select * from student,class;
select Class.ClassId,Class.ClassName,count(Student.StudentId) as totalStudent from student,class where Student.ClassId = Class.ClassId
group by Class.ClassId,Class.ClassName;
go
select Class.ClassId,Class.ClassName,count(Student.StudentId) as totalStudent from student right join class on
Student.ClassId = Class.ClassId group by Class.ClassId,Class.ClassName;

select Student.StudentId,
student.StudentName, sum(Result.Mark) as totalMark from student,result 
where student.StudentId = Result.StudentId group by Student.StudentId,
student.StudentName having sum(Result.Mark) > 10;

--where BirthDate >= '01/01/1993' and BirthDate <= '31/12/1998';

--SELECT FORMAT(GETDATE(), 'yyyy-MM-dd HH:mm:ss') AS CurrentDateTime;

--dbcc useroptions

SET DATEFORMAT ymd; -- Set the date format to month/day/year

create view vwStudentSubjectMark  as
select Student.StudentId,Student.StudentName,
Subject.SubjectName,Result.Mark from Result join Student 
on Result.StudentId = Student.StudentId
join Subject on
Subject.SubjectId = Result.SubjectIdPerson.BusinessEntityID;

select * from Result;
go
create proc sp_IncreaseMark @SubjectId int
as
begin
update Result set Mark = Mark + 1 where SubjectId = @SubjectId
end
go
exec sp_IncreaseMark 3

create nonclustered index ncix_Student_StudentName on Student(StudentName)
go

go
create trigger TG_Result_Insert on Result
for insert as
begin
-- todo
if 0 > any (select Mark from inserted )
begin
raiserror('Can not insert mark less than 0',16,1000);
rollback;
end
end
go
select * from Result;
insert into Result values (1,3,-2) , (2,1,-2);
go
create trigger TG_Subject_Update on Subject
for UPDATE as
begin
if(update(SubjectName))
begin
raiserror('Can not update SubjectName',16,1000);
rollback;
end
end

select * from [Subject]

update [Subject] set SubjectName = 'C CCC' where SubjectId = 1
or SubjectId = 3;
